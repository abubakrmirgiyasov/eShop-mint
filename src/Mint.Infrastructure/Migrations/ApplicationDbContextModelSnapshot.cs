// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mint.Infrastructure;

#nullable disable

namespace Mint.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Mint")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BadgeStyle")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("BadgeText")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DefaultLink")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Ico")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLink")
                        .IsUnique()
                        .HasFilter("[DefaultLink] IS NOT NULL");

                    b.HasIndex("PhotoId");

                    b.ToTable("Categories", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.CategoryTag", b =>
                {
                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTags", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Characteristics", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.CommonCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Guaranty")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Material")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CommonCharacteristics", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryOfOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryMaxDay")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryMinDay")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Gtin")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsFreeTax")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ManufactureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OldPrice")
                        .HasMaxLength(7)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasMaxLength(7)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductNumber"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("ShowOnHomePage")
                        .HasColumnType("bit");

                    b.Property<int>("Sku")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Gtin")
                        .IsUnique()
                        .HasFilter("[Gtin] IS NOT NULL");

                    b.HasIndex("ManufactureId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("Products", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.ProductCharacteristic", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharacteristicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "CharacteristicId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("ProductCharacteristics", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.ProductPhoto", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("ProductPhotos", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.ProductTag", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultLink")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Manufactures.Manufacture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("PhotoId");

                    b.HasIndex("Website")
                        .IsUnique()
                        .HasFilter("[Website] IS NOT NULL");

                    b.ToTable("Manufactures", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Manufactures.ManufactureCategory", b =>
                {
                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManufactureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ManufactureId");

                    b.HasIndex("ManufactureId");

                    b.ToTable("ManufactureCategories", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Manufactures.ManufactureTag", b =>
                {
                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManufactureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "ManufactureId");

                    b.HasIndex("ManufactureId");

                    b.ToTable("ManufactureTags", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Translate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Tags", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Common.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("countries", "Mint");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3616c928-a4d1-4dfb-a622-1d750bbb5739"),
                            CountryCode = "RU-ru",
                            Name = "Россия"
                        },
                        new
                        {
                            Id = new Guid("e8fc7423-4c93-4465-bfb4-8db45abb1296"),
                            CountryCode = "TJ-tj",
                            Name = "Тоҷикистон"
                        },
                        new
                        {
                            Id = new Guid("6f7652b5-92de-4a44-9342-a68a4b92ff52"),
                            CountryCode = "KZ-kz",
                            Name = "Қазақстан"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("contacts", "Mint");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f33ad47-a973-418c-a6b7-08660a4bd652"),
                            ContactInformation = "+79502768428",
                            Type = "Phone",
                            UserId = new Guid("e256100b-0328-4a16-924a-76bdf987e6a0")
                        },
                        new
                        {
                            Id = new Guid("70298181-e41d-41a9-86c5-ac349a74af6d"),
                            ContactInformation = "abubakrmirgiyasov@gmail.com",
                            Type = "Email",
                            UserId = new Guid("e256100b-0328-4a16-924a-76bdf987e6a0")
                        },
                        new
                        {
                            Id = new Guid("83733797-4c73-457a-874b-cba254c6d71e"),
                            ContactInformation = "admin@mint.com",
                            Type = "Email",
                            UserId = new Guid("2448250c-0fc7-464b-9872-ce6a17de0572")
                        },
                        new
                        {
                            Id = new Guid("66e835d3-7aaf-42be-9e7d-970173e4bae7"),
                            ContactInformation = "+73452763423",
                            Type = "Phone",
                            UserId = new Guid("2448250c-0fc7-464b-9872-ce6a17de0572")
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TranslateEn")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UniqueKey")
                        .IsUnique();

                    b.ToTable("roles", "Mint");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68c2f692-2f9a-4d0e-9d89-9c2ff7f0409b"),
                            Name = "Админ",
                            TranslateEn = "ADMIN",
                            UniqueKey = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("22a99751-e418-49c5-ac4e-ce221dd7ae0d"),
                            Name = "Продавец",
                            TranslateEn = "SELLER",
                            UniqueKey = "SELLER"
                        },
                        new
                        {
                            Id = new Guid("7582ed34-eb4a-4628-a7e7-971af7379ec8"),
                            Name = "Покупатель",
                            TranslateEn = "BUYER",
                            UniqueKey = "BUYER"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConfirmationCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmedEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmedPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeller")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("NumOfAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("users", "Mint");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e256100b-0328-4a16-924a-76bdf987e6a0"),
                            ConfirmationCode = 0,
                            DateBirth = new DateTime(2001, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Миргиясов Абубакр Почта: abubakrmirgiyasov@gmail.com Телефон: 89502768428",
                            FirstName = "Миргиясов",
                            Gender = "Male",
                            Ip = "127.0.0.1",
                            IsActive = true,
                            IsConfirmedEmail = true,
                            IsConfirmedPhone = false,
                            IsDeleted = false,
                            IsSeller = false,
                            LastName = "Мукимжонович",
                            NumOfAttempts = 0,
                            Password = "eWnLyXEeGl/1WoQmsosufkOJd47HzaZPdRTG9eAeFBE=",
                            Salt = new byte[] { 102, 205, 68, 248, 183, 201, 95, 253, 191, 151, 53, 181, 175, 67, 155, 33 },
                            SecondName = "Абубакр"
                        },
                        new
                        {
                            Id = new Guid("2448250c-0fc7-464b-9872-ce6a17de0572"),
                            ConfirmationCode = 0,
                            DateBirth = new DateTime(2003, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test User Почта: test@gmail.com Телефон: 83452763423",
                            FirstName = "Test",
                            Gender = "Female",
                            Ip = "127.0.0.2",
                            IsActive = true,
                            IsConfirmedEmail = true,
                            IsConfirmedPhone = false,
                            IsDeleted = false,
                            IsSeller = false,
                            NumOfAttempts = 0,
                            Password = "jWOnoIuvOH90XII8E/GleqdVK1PNO0w1/zLMatf7Ec4=",
                            Salt = new byte[] { 102, 205, 68, 248, 183, 201, 95, 253, 191, 151, 53, 181, 175, 67, 155, 33 },
                            SecondName = "User"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(999)
                        .HasColumnType("nvarchar(999)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("user_addresses", "Mint");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc20a457-ad9c-4a10-8d12-fd7e4fa72d1c"),
                            City = "Худжанд",
                            CountryId = new Guid("e8fc7423-4c93-4465-bfb4-8db45abb1296"),
                            Description = "full address for custom user",
                            FullAddress = "Таджикистан, г. Худжанд, ул. Тиллокон, дом 12 кв. 49",
                            FullName = "#e256100b-0328-4a16-924a-76bdf987e6a0 - FirstName:Миргиясов SecondName:Абубакр",
                            Street = "ул. Тиллокон",
                            UserId = new Guid("e256100b-0328-4a16-924a-76bdf987e6a0"),
                            ZipCode = 735700
                        },
                        new
                        {
                            Id = new Guid("7004e076-57ef-424f-b94b-b185bc1acc18"),
                            City = "Новосибирск",
                            CountryId = new Guid("e8fc7423-4c93-4465-bfb4-8db45abb1296"),
                            Description = "full address for custom user",
                            FullAddress = "Россия, г. Новосибирск, ул. Заллесского, дом 12 кв. 49",
                            FullName = "#e256100b-0328-4a16-924a-76bdf987e6a0 - FirstName:Миргиясов SecondName:Абубакр",
                            Street = "ул. Заллесского",
                            UserId = new Guid("2448250c-0fc7-464b-9872-ce6a17de0572"),
                            ZipCode = 635600
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles", "Mint");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("68c2f692-2f9a-4d0e-9d89-9c2ff7f0409b"),
                            UserId = new Guid("e256100b-0328-4a16-924a-76bdf987e6a0")
                        },
                        new
                        {
                            RoleId = new Guid("22a99751-e418-49c5-ac4e-ce221dd7ae0d"),
                            UserId = new Guid("e256100b-0328-4a16-924a-76bdf987e6a0")
                        },
                        new
                        {
                            RoleId = new Guid("7582ed34-eb4a-4628-a7e7-971af7379ec8"),
                            UserId = new Guid("e256100b-0328-4a16-924a-76bdf987e6a0")
                        },
                        new
                        {
                            RoleId = new Guid("68c2f692-2f9a-4d0e-9d89-9c2ff7f0409b"),
                            UserId = new Guid("2448250c-0fc7-464b-9872-ce6a17de0572")
                        },
                        new
                        {
                            RoleId = new Guid("22a99751-e418-49c5-ac4e-ce221dd7ae0d"),
                            UserId = new Guid("2448250c-0fc7-464b-9872-ce6a17de0572")
                        },
                        new
                        {
                            RoleId = new Guid("7582ed34-eb4a-4628-a7e7-971af7379ec8"),
                            UserId = new Guid("2448250c-0fc7-464b-9872-ce6a17de0572")
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Photos", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsPhysical")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("WorkHours")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("PhotoId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Stores", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.StoreAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreAddresses", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.StoreCategory", b =>
                {
                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StoreCategory", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.StoreReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("StoreRating")
                        .HasColumnType("float");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreReviews", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.StoreTag", b =>
                {
                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("StoreTags", "Mint");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.Category", b =>
                {
                    b.HasOne("Mint.Domain.Models.Photo", "Photo")
                        .WithMany("Categories")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.CategoryTag", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Categories.Category", "Category")
                        .WithMany("CategoryTags")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Admin.Tag", "Tag")
                        .WithMany("CategoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.CommonCharacteristic", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Categories.Product", "Product")
                        .WithMany("CommonCharacteristics")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.Product", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Categories.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mint.Domain.Models.Admin.Manufactures.Manufacture", "Manufacture")
                        .WithMany("Products")
                        .HasForeignKey("ManufactureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("Manufacture");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.ProductCharacteristic", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Categories.Characteristic", "Characteristic")
                        .WithMany("ProductCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Admin.Categories.Product", "Product")
                        .WithMany("ProductCharacteristics")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.ProductPhoto", b =>
                {
                    b.HasOne("Mint.Domain.Models.Photo", "Photo")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Admin.Categories.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.ProductTag", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Categories.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Admin.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.SubCategory", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Categories.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Manufactures.Manufacture", b =>
                {
                    b.HasOne("Mint.Domain.Models.Photo", "Photo")
                        .WithMany("Manufactures")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Manufactures.ManufactureCategory", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Categories.Category", "Category")
                        .WithMany("ManufactureCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Admin.Manufactures.Manufacture", "Manufacture")
                        .WithMany("ManufactureCategories")
                        .HasForeignKey("ManufactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacture");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Manufactures.ManufactureTag", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Manufactures.Manufacture", "Manufacture")
                        .WithMany("ManufactureTags")
                        .HasForeignKey("ManufactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Admin.Tag", "Tag")
                        .WithMany("ManufactureTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacture");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.Contact", b =>
                {
                    b.HasOne("Mint.Domain.Models.Identity.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.RefreshToken", b =>
                {
                    b.HasOne("Mint.Domain.Models.Identity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.User", b =>
                {
                    b.HasOne("Mint.Domain.Models.Photo", "Photo")
                        .WithMany("Users")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.UserAddress", b =>
                {
                    b.HasOne("Mint.Domain.Models.Common.Country", "Country")
                        .WithMany("UserAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Identity.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.UserRole", b =>
                {
                    b.HasOne("Mint.Domain.Models.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.Store", b =>
                {
                    b.HasOne("Mint.Domain.Models.Photo", "Photo")
                        .WithMany("Stores")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.StoreAddress", b =>
                {
                    b.HasOne("Mint.Domain.Models.Stores.Store", "Store")
                        .WithMany("StoreAddresses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.StoreCategory", b =>
                {
                    b.HasOne("Mint.Domain.Models.Admin.Categories.Category", "Category")
                        .WithMany("StoreCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Stores.Store", "Store")
                        .WithMany("StoreCategories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.StoreReview", b =>
                {
                    b.HasOne("Mint.Domain.Models.Stores.Store", "Store")
                        .WithMany("StoreReviews")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Identity.User", "User")
                        .WithMany("StoreReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.StoreTag", b =>
                {
                    b.HasOne("Mint.Domain.Models.Stores.Store", "Store")
                        .WithMany("StoreTags")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Admin.Tag", "Tag")
                        .WithMany("StoreTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.Category", b =>
                {
                    b.Navigation("CategoryTags");

                    b.Navigation("ManufactureCategories");

                    b.Navigation("Products");

                    b.Navigation("StoreCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.Characteristic", b =>
                {
                    b.Navigation("ProductCharacteristics");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Categories.Product", b =>
                {
                    b.Navigation("CommonCharacteristics");

                    b.Navigation("ProductCharacteristics");

                    b.Navigation("ProductPhotos");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Manufactures.Manufacture", b =>
                {
                    b.Navigation("ManufactureCategories");

                    b.Navigation("ManufactureTags");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Mint.Domain.Models.Admin.Tag", b =>
                {
                    b.Navigation("CategoryTags");

                    b.Navigation("ManufactureTags");

                    b.Navigation("ProductTags");

                    b.Navigation("StoreTags");
                });

            modelBuilder.Entity("Mint.Domain.Models.Common.Country", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("RefreshTokens");

                    b.Navigation("StoreReviews");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Mint.Domain.Models.Photo", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Manufactures");

                    b.Navigation("ProductPhotos");

                    b.Navigation("Stores");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Mint.Domain.Models.Stores.Store", b =>
                {
                    b.Navigation("StoreAddresses");

                    b.Navigation("StoreCategories");

                    b.Navigation("StoreReviews");

                    b.Navigation("StoreTags");
                });
#pragma warning restore 612, 618
        }
    }
}
