// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mint.Identity.Lib.Services;

#nullable disable

namespace Mint.Identity.Lib.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230728132142_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mint.Domain.Models.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TranslateEn")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UniqueKey")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77a6e9b4-64b8-46f0-998d-f01dd0b5b2b4"),
                            Name = "Админ",
                            TranslateEn = "ADMIN",
                            UniqueKey = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8d8d8618-c897-48d4-bedc-83ba3db4b7e1"),
                            Name = "Продавец",
                            TranslateEn = "SELLER",
                            UniqueKey = "SELLER"
                        },
                        new
                        {
                            Id = new Guid("4d442669-abe7-4726-af0f-5734879a113c"),
                            Name = "Покупатель",
                            TranslateEn = "BUYER",
                            UniqueKey = "BUYER"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConfirmationCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmedEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmedPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeller")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("NumOfAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("Phone")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1abd1404-1cb8-41e1-9f88-e3792172341c"),
                            ConfirmationCode = 0,
                            DateBirth = new DateTime(2001, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Миргиясов Абубакр Почта: abubakrmirgiyasov@gmail.com Телефон: 89502768428",
                            Email = "abubakrmirgiyasov@gmail.com",
                            FirstName = "Миргиясов",
                            Gender = "M",
                            Ip = "127.0.0.1",
                            IsActive = true,
                            IsConfirmedEmail = true,
                            IsConfirmedPhone = false,
                            IsDeleted = false,
                            IsSeller = false,
                            LastName = "Мукимжонович",
                            NumOfAttempts = 0,
                            Password = "z1eH781ZCR9St9pkKfyRmLGHtpVRHSpRY2scTBdoBD8=",
                            Phone = 89502768428L,
                            Salt = new byte[] { 190, 1, 44, 245, 56, 147, 21, 10, 184, 223, 230, 238, 200, 72, 51, 22 },
                            SecondName = "Абубакр"
                        },
                        new
                        {
                            Id = new Guid("7a2adcca-35d6-419d-8556-09ee8f532b79"),
                            ConfirmationCode = 0,
                            DateBirth = new DateTime(2003, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test User Почта: test@gmail.com Телефон: 83452763423",
                            Email = "admin@mint.com",
                            FirstName = "Test",
                            Gender = "F",
                            Ip = "127.0.0.2",
                            IsActive = true,
                            IsConfirmedEmail = true,
                            IsConfirmedPhone = false,
                            IsDeleted = false,
                            IsSeller = false,
                            NumOfAttempts = 0,
                            Password = "dQ7k3UwsdOWwTdFNrfpUHyJGcfQ1YDEkc6O0EonFavQ=",
                            Phone = 83452763423L,
                            Salt = new byte[] { 190, 1, 44, 245, 56, 147, 21, 10, 184, 223, 230, 238, 200, 72, 51, 22 },
                            SecondName = "User"
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Description")
                        .HasMaxLength(777)
                        .HasColumnType("nvarchar(777)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("77a6e9b4-64b8-46f0-998d-f01dd0b5b2b4"),
                            UserId = new Guid("1abd1404-1cb8-41e1-9f88-e3792172341c")
                        },
                        new
                        {
                            RoleId = new Guid("8d8d8618-c897-48d4-bedc-83ba3db4b7e1"),
                            UserId = new Guid("1abd1404-1cb8-41e1-9f88-e3792172341c")
                        },
                        new
                        {
                            RoleId = new Guid("4d442669-abe7-4726-af0f-5734879a113c"),
                            UserId = new Guid("1abd1404-1cb8-41e1-9f88-e3792172341c")
                        },
                        new
                        {
                            RoleId = new Guid("77a6e9b4-64b8-46f0-998d-f01dd0b5b2b4"),
                            UserId = new Guid("7a2adcca-35d6-419d-8556-09ee8f532b79")
                        },
                        new
                        {
                            RoleId = new Guid("8d8d8618-c897-48d4-bedc-83ba3db4b7e1"),
                            UserId = new Guid("7a2adcca-35d6-419d-8556-09ee8f532b79")
                        },
                        new
                        {
                            RoleId = new Guid("4d442669-abe7-4726-af0f-5734879a113c"),
                            UserId = new Guid("7a2adcca-35d6-419d-8556-09ee8f532b79")
                        });
                });

            modelBuilder.Entity("Mint.Domain.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdateDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.RefreshToken", b =>
                {
                    b.HasOne("Mint.Domain.Models.Identity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.User", b =>
                {
                    b.HasOne("Mint.Domain.Models.Photo", "Photo")
                        .WithOne("TEntities")
                        .HasForeignKey("Mint.Domain.Models.Identity.User", "PhotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.UserAddress", b =>
                {
                    b.HasOne("Mint.Domain.Models.Identity.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.UserRole", b =>
                {
                    b.HasOne("Mint.Domain.Models.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mint.Domain.Models.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Mint.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Mint.Domain.Models.Photo", b =>
                {
                    b.Navigation("TEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
